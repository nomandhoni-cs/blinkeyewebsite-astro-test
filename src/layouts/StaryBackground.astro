---
import { useEffect } from "astro:useEffect";

let canvas: HTMLCanvasElement | null = null;

const colors = [
  "#FE4C55", // Your brand color
  "#FF6363", // A vibrant coral red
  "#FF7A7B", // Lightened pink-red, a bit softer
  "#D94A54", // Slightly darker, more grounded tone
  "#E15761", // Similar hue with a little more saturation
  "#FF8485", // Bright and slightly pastel
  "#C4454A", // A deeper, muted red for contrast
  "#FF9497", // A light, approachable pinkish tone
  "#F3474F", // Bold and punchy, more red-based
  "#FFA3A5", // Soft blush with a hint of warmth
  ...Array(98).fill("#fff"),
]; // Stars visible in light and dark

const randomInt = (max: number, min: number) =>
  Math.floor(Math.random() * (max - min) + min);

class Star {
  x: number;
  y: number;
  radius: number;
  color: string;
  dy: number;

  constructor(
    canvasWidth: number,
    canvasHeight: number,
    colorPalette: string[]
  ) {
    this.x = randomInt(0, canvasWidth);
    this.y = randomInt(0, canvasHeight);
    this.radius = Math.random() * 1.1;
    this.color = colorPalette[randomInt(0, colorPalette.length)];
    this.dy = -Math.random() * 0.3;
  }

  draw(context: CanvasRenderingContext2D) {
    context.beginPath();
    context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    context.shadowBlur = randomInt(3, 15);
    context.shadowColor = this.color;
    context.strokeStyle = this.color;
    context.fillStyle = "rgba(255, 255, 255, .5)";
    context.fill();
    context.stroke();
    context.closePath();
  }

  update(
    stars: Star[],
    canvasWidth: number,
    canvasHeight: number,
    context: CanvasRenderingContext2D
  ) {
    if (this.y - this.radius < 0)
      this.createNewStar(stars, canvasWidth, canvasHeight);
    this.y += this.dy;
    this.draw(context);
  }

  createNewStar(stars: Star[], canvasWidth: number, canvasHeight: number) {
    const i = stars.indexOf(this);
    stars.splice(i, 1);
    stars.push(new Star(canvasWidth, canvasHeight, colors));
  }
}

const initializeCanvas = (canvas: HTMLCanvasElement) => {
  const context = canvas.getContext("2d");
  if (!context) return;

  const n_stars = 150;
  let stars: Star[] = [];

  const initStars = () => {
    stars = [];
    for (let i = 0; i < n_stars; i++) {
      stars.push(new Star(canvas.width, canvas.height, colors));
    }
  };

  const animate = () => {
    requestAnimationFrame(animate);
    context.clearRect(0, 0, canvas.width, canvas.height);
    stars.forEach((star) =>
      star.update(stars, canvas.width, canvas.height, context)
    );
  };

  const handleResize = () => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    const dpr = window.devicePixelRatio || 1;

    // Set canvas size with device pixel ratio to avoid blurriness
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;

    // Scale the context for retina displays
    context.scale(dpr, dpr);

    // Reinitialize stars after resizing
    initStars();
  };

  window.addEventListener("resize", handleResize);

  // Initial setup
  handleResize();
  animate();

  return () => {
    window.removeEventListener("resize", handleResize);
  };
};

useEffect(() => {
  if (canvas) {
    return initializeCanvas(canvas);
  }
});
---

<canvas
  ref={(el: HTMLCanvasElement | null) => (canvas = el)}
  class="w-full h-full fixed inset-0 -z-10 overflow-hidden"></canvas>
